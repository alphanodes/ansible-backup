---
- name: Find temporary backup files
  ansible.builtin.find:
    paths: "{{ backup_dir }}"
    file_type: file
    patterns:
      - '*.tar'
  become: "{{ backup_files_become | default(omit) }}"
  become_user: "{{ backup_files_become_user | default(omit) }}"
  register: backup_tmp

- name: Remove temporary backup files
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  become: "{{ backup_files_become | default(omit) }}"
  become_user: "{{ backup_files_become_user | default(omit) }}"
  loop: "{{ backup_tmp.files | default([]) }}"
  when: backup_tmp.matched > 0

- name: Find old daily files
  ansible.builtin.find:
    paths: "{{ backup_dir }}"
    file_type: file
    patterns:
      - '*-daily.*'
    age: "{{ backup_max_days }}d"
    age_stamp: mtime
  become: "{{ backup_files_become | default(omit) }}"
  become_user: "{{ backup_files_become_user | default(omit) }}"
  register: backup_files

- name: Remove old daily files
  ansible.builtin.file:
    path: '{{ item.path }}'
    state: absent
  loop: "{{ backup_files.files | default([]) }}"
  become: "{{ backup_files_become | default(omit) }}"
  become_user: "{{ backup_files_become_user | default(omit) }}"
  when: backup_files.matched > 0

- name: Find old weekly files
  ansible.builtin.find:
    paths: "{{ backup_dir }}"
    file_type: file
    patterns:
      - '*-weekly.*'
    age: "{{ backup_max_weeks }}w"
    age_stamp: mtime
  become: "{{ backup_files_become | default(omit) }}"
  become_user: "{{ backup_files_become_user | default(omit) }}"
  register: backup_files

- name: Remove old weekly files
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ backup_files.files | default([]) }}"
  become: "{{ backup_files_become | default(omit) }}"
  become_user: "{{ backup_files_become_user | default(omit) }}"
  when: backup_files.matched > 0

- name: Find old monthly files
  ansible.builtin.find:
    paths: "{{ backup_dir }}"
    file_type: file
    patterns:
      - '*-monthly.*'
    age: "{{ backup_max_months * 31 }}d"
    age_stamp: mtime
  register: backup_files
  become: "{{ backup_files_become | default(omit) }}"
  become_user: "{{ backup_files_become_user | default(omit) }}"

- name: Remove old monthly files
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ backup_files.files | default([]) }}"
  become: "{{ backup_files_become | default(omit) }}"
  become_user: "{{ backup_files_become_user | default(omit) }}"
  when: backup_files.matched > 0

- name: Search for existing backup files
  ansible.builtin.shell: ls -1 {{ backup_dir }}/*-{{ day_stamp }}*
  register: day_files
  failed_when: day_files.rc > 2
  changed_when: false
  become: "{{ backup_files_become | default(omit) }}"
  become_user: "{{ backup_files_become_user | default(omit) }}"
  when: backup_one_per_day_limit | bool

- name: Remove existing backups of the current day
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop: "{{ day_files.stdout_lines | default([]) }}"
  become: "{{ backup_files_become | default(omit) }}"
  become_user: "{{ backup_files_become_user | default(omit) }}"
